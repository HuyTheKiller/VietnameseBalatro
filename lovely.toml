[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Localization support for empty voucher slot text (vanilla)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = 'DEFEAT', scale = 0.6, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = localize('k_voucher_restock_1'), scale = 0.6, colour = G.C.WHITE}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = 'BOSS BLIND', scale = 0.4, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = localize('k_voucher_restock_2'), scale = 0.4, colour = G.C.WHITE}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = 'TO RESTOCK', scale = 0.4, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = localize('k_voucher_restock_3'), scale = 0.4, colour = G.C.WHITE}}'''
match_indent = true

# Localization support for empty voucher slot text (Cryptid)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[1] or '') or 'DEFEAT', scale = 0.6, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[1] or '') or localize('k_voucher_restock_1'), scale = 0.6, colour = G.C.WHITE}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[2] or '') or G.GAME.modifiers.cry_voucher_restock_antes and G.GAME.round_resets.ante % G.GAME.modifiers.cry_voucher_restock_antes == 0 and 'TWO BOSS BLINDS' or 'BOSS BLIND', scale = 0.4, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[2] or '') or G.GAME.modifiers.cry_voucher_restock_antes and G.GAME.round_resets.ante % G.GAME.modifiers.cry_voucher_restock_antes == 0 and localize('k_cry_voucher_restock_2') or localize('k_voucher_restock_2'), scale = 0.4, colour = G.C.WHITE}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[3] or '') or 'TO RESTOCK', scale = 0.4, colour = G.C.WHITE}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = G.GAME.modifiers.cry_no_vouchers and (very_fair_quip[3] or '') or localize('k_voucher_restock_3'), scale = 0.4, colour = G.C.WHITE}}'''
match_indent = true

# Allowing said text to appear on all languages (falls back to English if applicable)
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''elseif G.SETTINGS.language ~= 'en-us' then'''
position = "at"
payload = '''elseif false then'''
match_indent = true

# Patches to fix an issue where the way Balatro handles "Round score" text affects Vietnamese translation
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''contents.dollars_chips = {n=G.UIT.R, config={align = "cm",r=0.1, padding = 0,colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'row_dollars_chips'}, nodes={'''
position = "before"
payload = '''if G.SETTINGS.language ~= 'vi' then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''contents.buttons = {'''
position = "before"
payload = '''
else
  contents.dollars_chips = {n=G.UIT.R, config={align = "cm",r=0.1, padding = 0,colour = G.C.DYN_UI.BOSS_MAIN, emboss = 0.05, id = 'row_dollars_chips'}, nodes={
    {n=G.UIT.C, config={align = "cm", padding = 0.1}, nodes={
      {n=G.UIT.C, config={align = "cm", minw = 1.3}, nodes={
        {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
          {n=G.UIT.T, config={text = localize('k_lower_score'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
        }},
        {n=G.UIT.R, config={align = "cm", padding = 0, maxw = 1.3}, nodes={
          {n=G.UIT.T, config={text =localize('k_round'), scale = 0.42, colour = G.C.UI.TEXT_LIGHT, shadow = true}}
        }}
      }},
      {n=G.UIT.C, config={align = "cm", minw = 3.3, minh = 0.7, r = 0.1, colour = G.C.DYN_UI.BOSS_DARK}, nodes={
        {n=G.UIT.O, config={w=0.5,h=0.5 , object = stake_sprite, hover = true, can_collide = false}},
        {n=G.UIT.B, config={w=0.1,h=0.1}},
        {n=G.UIT.T, config={ref_table = G.GAME, ref_value = 'chips_text', lang = G.LANGUAGES['en-us'], scale = 0.85, colour = G.C.WHITE, id = 'chip_UI_count', func = 'chip_UI_set', shadow = true}}
      }}
    }}
  }}
end
'''
match_indent = true

# Patch to un-hardcode "Not Allowed!" text
# What kind of abomination is this? LocalThunk really knows how to trigger translators huh?
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''play_area_status_text("Not Allowed!")--localize('k_not_allowed_ex'), true)'''
position = "at"
payload = '''play_area_status_text(localize('k_not_allowed_ex'))'''
match_indent = true

# Patch to un-hardcode Orbital Tag's Poker Hand levelup effect
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''handname= self.ability.orbital_hand,'''
position = "at"
payload = '''handname = localize(self.ability.orbital_hand, "poker_hands"),'''
overwrite = true
match_indent = true

# Patches to un-hardcode "PEEK DECK" text (this has gone unnoticed for so long because I haven't got myself a controller)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = 'PEEK', scale = 0.48, colour = G.C.WHITE, shadow = true}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = localize('k_peek_deck_1'), scale = 0.48, colour = G.C.WHITE, shadow = true}}'''
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''{n=G.UIT.T, config={text = 'DECK', scale = 0.38, colour = G.C.WHITE, shadow = true}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = localize('k_peek_deck_2'), scale = 0.38, colour = G.C.WHITE, shadow = true}}'''
overwrite = true
match_indent = true

# Alternative patch for when SMODS is not installed - VietnameseBalatro injected this way is VERY UNSTABLE, therefore NOT RECOMMENDED
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''['zh_TW'] = {font = 3, label = "繁體中文", key = 'zh_TW', beta = nil, button = "意見回饋", warning = {'這個語言目前尚為Beta版本。請幫助我們改善翻譯品質，','點擊”意見回饋” 來提供你的意見。', "再按一下即可確認"}},'''
position = "after"
payload = '''['vi'] = {font = 3, label = "Tiếng Việt", key = 'vi', beta = true, button = "Phản Hồi Ngôn Ngữ (vô dụng)", warning = {"Đây là bản dịch cá nhân và được chèn vào game thông qua Lovely.", "Phương thức chèn này cực kì thiếu ổn định. Vui lòng cài thêm", "Steamodded (smods) để tối ưu hoá trải nghiệm nếu có thể."}},'''
match_indent = true

[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "VERSION = VERSION..'-FULL'"
position = "after"
payload = "VERSIONVN = VERSION..'-VietnameseBalatro by HuyTheKiller'"
match_indent = true

[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = '''self.VERSION = VERSION'''
position = "after"
payload = '''self.VERSIONVN = VERSIONVN'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{n=G.UIT.T, config={text = G.VERSION, scale = 0.3, colour = G.C.UI.TEXT_LIGHT}}"
position = "at"
payload = '''{n=G.UIT.T, config={text = SMODS and G.VERSION or G.VERSIONVN, scale = 0.3, colour = G.C.UI.TEXT_LIGHT}}'''
match_indent = true

# Make DebugPlus (if installed) use the modified font
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = "self.font.FONT = love.graphics.newFont(data, self.font.render_scale)"
position = "after"
payload = '''
if self.key == "vi" then
    love.graphics.setNewFont(data, G.TILESIZE)
    G.FONTS[1].FONT = love.graphics.newFont(data, G.FONTS[1].render_scale)
end
'''
match_indent = true

# Vietnamese text input support (very experimental)
# [[patches]]
# [patches.pattern]
# target = "functions/button_callbacks.lua"
# pattern = '''G.CONTROLLER.text_input_id = e.config.id'''
# position = "after"
# payload = '''VNBalatro.awaiting_dead_key = false'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/button_callbacks.lua"
# pattern = '''elseif args.key == 'LEFT' then --Move cursor position to the left'''
# position = "after"
# payload = '''  VNBalatro.awaiting_dead_key = false'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/button_callbacks.lua"
# pattern = '''elseif args.key == 'RIGHT' then --Move cursor position to the right'''
# position = "after"
# payload = '''  VNBalatro.awaiting_dead_key = false'''
# match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/button_callbacks.lua"
# pattern = '''
# MODIFY_TEXT_INPUT{
#   letter = args.key,
#   text_table = text,
#   pos = text.current_position+1
# }
# TRANSPOSE_TEXT_INPUT(1)
# '''
# position = "at"
# payload = '''

# local worker = text.letters[text.current_position] or ''
# local isupper = string.isup(worker)
# local result_key = args.key
# local modified = false
# if G.SETTINGS.language == 'vi' then
#   for k, v in pairs(VNBalatro.accented_table) do
#     if k == "base" and not VNBalatro.awaiting_dead_key then
#       for i = 1, #v do
#         if args.key == string.sub(v, i, i) then
#           VNBalatro.awaiting_dead_key = true
#           break
#         end
#       end
#       if VNBalatro.awaiting_dead_key then break end
#     end
#     if k ~= "base" and VNBalatro.awaiting_dead_key then
#       for raw_key, arr in pairs(v) do
#         local t1 = U_INDEX_ARR(arr[1])
#         local t2 = U_INDEX_ARR(VNBalatro.max_accented)
#         if string.lower(worker) == RAW_TO_UNICODE(raw_key) then
#           for i = 1, #t1-1 do
#             if args.key == string.sub(arr[1+VNBalatro.config.input_method], i, i) then
#               result_key = string.sub(arr[1], t1[i], t1[i+1]-1)
#               modified = true
#               for j = 1, #t2-1 do
#                 if result_key == string.sub(VNBalatro.max_accented, t2[j], t2[j+1]-1) then
#                   VNBalatro.awaiting_dead_key = false
#                   break
#                 end
#               end
#               MODIFY_TEXT_INPUT{
#                 letter = '',
#                 text_table = text,
#                 pos = text.current_position,
#                 delete = true
#               }
#               TRANSPOSE_TEXT_INPUT(-1)
#               break
#             end
#           end
#         end
#       end
#       if modified then break end
#     end
#   end
# end
# MODIFY_TEXT_INPUT{
#   letter = isupper and modified and string.upper(result_key) or result_key,
#   text_table = text,
#   pos = text.current_position+1
# }
# TRANSPOSE_TEXT_INPUT(1)

# '''
# match_indent = true